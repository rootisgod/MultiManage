# https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
# https://github.com/actions/upload-release-asset

name: Create Packages From Push to Main

on:
    workflow_dispatch:
    push:
        # tags:
        #     - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
        branches:
            - main

jobs:
    createrelease:
        name: Create Release
        runs-on: [ubuntu-latest]
        outputs:
            upload_url: ${{ steps.upload_url.outputs.upload_url }}
        steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v1.${{ github.run_number }}
                  release_name: v1.${{ github.run_number }}
                  draft: false
                  prerelease: false
            - name: Get Release URL
              id: upload_url
              run:
                  echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT

    build:
        name: Build packages
        needs: createrelease
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: macos-latest
                      TARGET: macos
                      CMD_BUILD: |
                        python3 -m pip install --upgrade pip
                        pip3 install -r requirements.txt
                        pip3 install pyinstaller
                        pyinstaller -F -w -n multimanage multimanage.py
                        cd dist
                        zip multimanage.zip multimanage
                      OUT_FILE_NAME: multimanage.zip
                      ASSET_MIME: application/zip
                    - os: windows-latest
                      TARGET: windows-installer
                      CMD_BUILD: |
                        python -m pip install --upgrade pip
                        pip install -r requirements.txt
                        pip install pyinstaller
                        pyinstaller -F -w -n multimanage multimanage.py
                        Start-BitsTransfer -Source https://jrsoftware.org/download.php/is.exe -Destination is.exe
                        Start-Process -FilePath "is.exe" -Wait -ArgumentList "/silent /norestart"
                        .'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' /dMyAppVersion=1.$($env:GITHUB_RUN_NUMBER) multimanage.iss
                      OUT_FILE_NAME: multimanage.exe
                      ASSET_MIME: application/vnd.microsoft.portable-executable
                    - os: windows-latest
                      TARGET: windows-portable
                      CMD_BUILD: |
                        python -m pip install --upgrade pip
                        pip install -r requirements.txt
                        pip install pyinstaller
                        pyinstaller -F -w -n multimanage multimanage.py
                      OUT_FILE_NAME: multimanage.exe
                      ASSET_MIME: application/vnd.microsoft.portable-executable                    
                    - os: ubuntu-22.04
                      TARGET: linux
                      CMD_BUILD: |
                        sudo apt install python3 python3-pip python3-venv python3-tk -y
                        python3 -m venv ./venv-multimanage/
                        sudo chmod +x ./venv-multimanage/bin/activate
                        . ./venv-multimanage/bin/activate
                        python3 -m pip install --upgrade pip
                        pip3 install -r requirements.txt
                        pip install pyinstaller
                        pyinstaller -F -w -n multimanage multimanage.py
                        cd dist/
                        zip multimanage.zip multimanage
                      OUT_FILE_NAME: multimanage.zip
                      ASSET_MIME: application/zip
        steps:
            - uses: actions/checkout@v3
            - name: Set up Python
              uses: actions/setup-python@v4
#            - name: Install dependencies using pip
#              run: |
#                  python -m pip install --upgrade pip
#                  pip install -r requirements.txt
            - name: Build with pyinstaller for ${{matrix.TARGET}}
              run: ${{matrix.CMD_BUILD}}
            - name: Upload Release Asset
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.createrelease.outputs.upload_url }}
                  asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
                  asset_name: ${{ matrix.OUT_FILE_NAME}}
                  asset_content_type: ${{ matrix.ASSET_MIME}}
            - if: matrix.targer == 'windows-portable'
              name: Upload Windows Exe
              id: upload-windows-portable-release-asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ needs.createrelease.outputs.upload_url }}
                asset_path: ./Output/${{ matrix.OUT_FILE_NAME}}
                asset_name: ${{ matrix.OUT_FILE_NAME}}
                asset_content_type: ${{ matrix.ASSET_MIME}}
            - if: matrix.target == 'windows-installer'
              name: Upload Windows Installer Exe
              id: upload-windows-installer-release-asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ needs.createrelease.outputs.upload_url }}
                asset_path: ./Output/${{ matrix.OUT_FILE_NAME}}
                asset_name: Installer-${{ matrix.OUT_FILE_NAME}}
                asset_content_type: ${{ matrix.ASSET_MIME}}
            - if: matrix.os == 'ubuntu-22.04'
              name: Upload Linux Zip
              id: upload-linux-zip-release-asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ needs.createrelease.outputs.upload_url }}
                asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
                asset_name: Linux-${{ matrix.OUT_FILE_NAME}}
                asset_content_type: ${{ matrix.ASSET_MIME}}
            - if: matrix.os == 'macos-latest'
              name: Upload Mac Zip
              id: upload-mac-zip-release-asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ needs.createrelease.outputs.upload_url }}
                asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
                asset_name: Mac-${{ matrix.OUT_FILE_NAME}}
                asset_content_type: ${{ matrix.ASSET_MIME}}
