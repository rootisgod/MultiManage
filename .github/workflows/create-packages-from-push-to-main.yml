# https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions

name: Create Packages From Push to Main

on:
    workflow_dispatch:
    push:
        tags:
            - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
        branches:
            - main
            - MM8-Create-Github-Actions-to-Build-Installer

jobs:
    createrelease:
        name: Create Release
        runs-on: [ubuntu-latest]
        steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}-${{ github.run_number }}
                  release_name: Release-${{ github.ref }}-${{ github.run_number }}
                  draft: false
                  prerelease: false
            - name: Output Release URL File
              run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
            - name: Save Release URL File for publish
              uses: actions/upload-artifact@v1
              with:
                  name: release_url
                  path: release_url.txt

    build:
        name: Build packages
        needs: createrelease
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: windows-latest
                      TARGET: windows
                      CMD_BUILD: pyinstaller -F -w -n multimanage multimanage.py
                      OUT_FILE_NAME: multimanage.exe
                      ASSET_MIME: application/vnd.microsoft.portable-executable
        steps:
            # =========================================================
            # Checkout code and build
            # =========================================================
            - uses: actions/checkout@v3
            - name: Set up Python
              uses: actions/setup-python@v4
            - name: Install dependencies using pip
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
            - name: Build with pyinstaller for ${{matrix.TARGET}}
              run: ${{matrix.CMD_BUILD}}

            # =========================================================
            # Get a release URL (?)
            # =========================================================
            - name: Load Release URL File from release job
              uses: actions/download-artifact@v1
              with:
                  name: release_url

            # =========================================================
            # Figure out URL
            # =========================================================
            - name: Get Release File Name & Upload URL
              id: get_release_info
              shell: bash
              run: |
                  value=`cat release_url/release_url.txt`
                  echo ::set-output name=upload_url::$value

            - name: Show URL
              id: show_release_url
              shell: bash
              run: cat release_url/release_url.txt

            # =========================================================
            # Upload to Github
            # =========================================================
            - name: Upload Release Asset
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.get_release_info.outputs.upload_url }}
                  asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
                  asset_name: ${{ matrix.OUT_FILE_NAME}}
                  asset_content_type: ${{ matrix.ASSET_MIME}}
